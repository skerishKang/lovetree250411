{"version":3,"file":"ChatPage-Dr8WZdY1.js","sources":["../../node_modules/@heroicons/react/24/outline/esm/ChatBubbleLeftIcon.js","../../src/components/ChatList.tsx","../../src/components/Chat.tsx","../../src/components/ChatPage.tsx"],"sourcesContent":["import * as React from \"react\";\nfunction ChatBubbleLeftIcon({\n  title,\n  titleId,\n  ...props\n}, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 1.5,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    \"data-slot\": \"icon\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M2.25 12.76c0 1.6 1.123 2.994 2.707 3.227 1.087.16 2.185.283 3.293.369V21l4.076-4.076a1.526 1.526 0 0 1 1.037-.443 48.282 48.282 0 0 0 5.68-.494c1.584-.233 2.707-1.626 2.707-3.228V6.741c0-1.602-1.123-2.995-2.707-3.228A48.394 48.394 0 0 0 12 3c-2.392 0-4.744.175-7.043.513C3.373 3.746 2.25 5.14 2.25 6.741v6.018Z\"\n  }));\n}\nconst ForwardRef = /*#__PURE__*/ React.forwardRef(ChatBubbleLeftIcon);\nexport default ForwardRef;","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\nimport { setActiveChat } from '../features/chat/chatSlice';\r\nimport axios from 'axios';\r\n\r\ninterface ChatUser {\r\n  id: string;\r\n  username: string;\r\n  profileImage?: string;\r\n  lastMessage?: string;\r\n  lastMessageTime?: string;\r\n  unreadCount?: number;\r\n  isOnline: boolean;\r\n}\r\n\r\nconst ChatList: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { activeChat, onlineUsers } = useSelector((state: RootState) => state.chat);\r\n  const [users, setUsers] = useState<ChatUser[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    console.log('채팅 목록 컴포넌트 마운트');\r\n    const fetchChatUsers = async () => {\r\n      try {\r\n        console.log('채팅 사용자 목록 가져오기 시도');\r\n        const response = await axios.get('/api/chat/users');\r\n        console.log('채팅 사용자 목록 가져오기 성공:', response.data);\r\n        setUsers(response.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error('채팅 목록을 불러오는데 실패했습니다:', error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchChatUsers();\r\n\r\n    return () => {\r\n      console.log('채팅 목록 컴포넌트 언마운트');\r\n    };\r\n  }, []);\r\n\r\n  const handleUserClick = (userId: string) => {\r\n    console.log('사용자 선택:', userId);\r\n    dispatch(setActiveChat(userId));\r\n  };\r\n\r\n  if (loading) {\r\n    console.log('채팅 목록 로딩 중');\r\n    return (\r\n      <div className=\"w-80 bg-white h-full border-r\">\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  console.log('채팅 목록 렌더링:', { users, activeChat });\r\n\r\n  return (\r\n    <div className=\"w-80 bg-white h-full border-r\">\r\n      <div className=\"p-4 border-b\">\r\n        <h2 className=\"text-xl font-semibold\">채팅</h2>\r\n      </div>\r\n      <div className=\"overflow-y-auto\">\r\n        {users.map((user) => (\r\n          <div\r\n            key={user.id}\r\n            className={`flex items-center p-4 cursor-pointer hover:bg-gray-50 ${\r\n              activeChat === user.id ? 'bg-blue-50' : ''\r\n            }`}\r\n            onClick={() => handleUserClick(user.id)}\r\n          >\r\n            <div className=\"relative\">\r\n              <img\r\n                src={user.profileImage || '/default-profile.png'}\r\n                alt={user.username}\r\n                className=\"w-12 h-12 rounded-full\"\r\n              />\r\n              {user.isOnline && (\r\n                <div className=\"absolute bottom-0 right-0 w-3 h-3 bg-green-500 rounded-full border-2 border-white\" />\r\n              )}\r\n            </div>\r\n            <div className=\"ml-3 flex-1\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <p className=\"font-semibold\">{user.username}</p>\r\n                {user.lastMessageTime && (\r\n                  <p className=\"text-xs text-gray-500\">\r\n                    {new Date(user.lastMessageTime).toLocaleTimeString()}\r\n                  </p>\r\n                )}\r\n              </div>\r\n              {user.lastMessage && (\r\n                <p className=\"text-sm text-gray-500 truncate\">{user.lastMessage}</p>\r\n              )}\r\n            </div>\r\n            {user.unreadCount && user.unreadCount > 0 && (\r\n              <div className=\"ml-2 bg-blue-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\">\r\n                {user.unreadCount}\r\n              </div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatList; ","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, RootState } from '../store';\r\nimport { getChatUsers, getChatMessages, createMessage } from '../features/chat/chatSlice';\r\nimport { io, Socket } from 'socket.io-client';\r\nimport { ChatBubbleLeftIcon } from '@heroicons/react/24/outline';\r\n\r\nconst Chat: React.FC = () => {\r\n  const dispatch = useDispatch<AppDispatch>();\r\n  const { users, messages, status } = useSelector((state: RootState) => state.chat);\r\n  const { user } = useSelector((state: RootState) => state.auth);\r\n  const [selectedUser, setSelectedUser] = useState<string | null>(null);\r\n  const [newMessage, setNewMessage] = useState('');\r\n  const [socket, setSocket] = useState<Socket | null>(null);\r\n  const messagesEndRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    console.log('채팅 컴포넌트 마운트');\r\n    dispatch(getChatUsers());\r\n    \r\n    const newSocket = io('http://localhost:5000', {\r\n      auth: {\r\n        token: localStorage.getItem('token')\r\n      }\r\n    });\r\n    \r\n    console.log('소켓 연결 시도');\r\n    setSocket(newSocket);\r\n\r\n    return () => {\r\n      console.log('채팅 컴포넌트 언마운트, 소켓 연결 종료');\r\n      newSocket.close();\r\n    };\r\n  }, [dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (selectedUser) {\r\n      console.log('선택된 사용자 변경:', selectedUser);\r\n      dispatch(getChatMessages(selectedUser));\r\n    }\r\n  }, [dispatch, selectedUser]);\r\n\r\n  useEffect(() => {\r\n    if (socket) {\r\n      console.log('소켓 이벤트 리스너 설정');\r\n      socket.on('message', (message) => {\r\n        console.log('새 메시지 수신:', message);\r\n        if (message.sender === selectedUser || message.receiver === selectedUser) {\r\n          dispatch(getChatMessages(selectedUser!));\r\n        }\r\n      });\r\n    }\r\n  }, [socket, selectedUser, dispatch]);\r\n\r\n  useEffect(() => {\r\n    console.log('메시지 목록 업데이트, 스크롤 이동');\r\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\r\n  }, [messages]);\r\n\r\n  const handleSendMessage = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (!newMessage.trim() || !selectedUser) {\r\n      console.log('메시지 전송 실패: 빈 메시지 또는 선택된 사용자 없음');\r\n      return;\r\n    }\r\n\r\n    console.log('메시지 전송 시도:', { receiver: selectedUser, content: newMessage });\r\n    await dispatch(createMessage({\r\n      receiver: selectedUser,\r\n      content: newMessage\r\n    }));\r\n\r\n    setNewMessage('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex h-[calc(100vh-64px)]\">\r\n      {/* 채팅 목록 */}\r\n      <div className=\"w-1/3 border-r\">\r\n        <div className=\"p-4\">\r\n          <h2 className=\"text-xl font-bold mb-4\">채팅</h2>\r\n          {users.map((chatUser) => (\r\n            <div\r\n              key={chatUser._id}\r\n              className={`flex items-center p-3 cursor-pointer hover:bg-gray-100 ${\r\n                selectedUser === chatUser._id ? 'bg-gray-100' : ''\r\n              }`}\r\n              onClick={() => setSelectedUser(chatUser._id)}\r\n            >\r\n              <img\r\n                src={chatUser.profileImage || '/default-profile.png'}\r\n                alt={chatUser.username}\r\n                className=\"w-10 h-10 rounded-full mr-3\"\r\n              />\r\n              <div className=\"flex-1\">\r\n                <div className=\"font-semibold\">{chatUser.username}</div>\r\n                <div className=\"text-sm text-gray-500 truncate\">\r\n                  {chatUser.lastMessage?.content}\r\n                </div>\r\n              </div>\r\n              {chatUser.unreadCount > 0 && (\r\n                <div className=\"ml-2 bg-blue-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs\">\r\n                  {chatUser.unreadCount}\r\n                </div>\r\n              )}\r\n              {chatUser.isOnline && (\r\n                <div className=\"ml-2 w-2 h-2 bg-green-500 rounded-full\" />\r\n              )}\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* 채팅 내용 */}\r\n      <div className=\"w-2/3 flex flex-col\">\r\n        {selectedUser ? (\r\n          <>\r\n            <div className=\"p-4 border-b flex items-center\">\r\n              <img\r\n                src={users.find(u => u._id === selectedUser)?.profileImage || '/default-profile.png'}\r\n                alt=\"\"\r\n                className=\"w-8 h-8 rounded-full mr-3\"\r\n              />\r\n              <h3 className=\"font-semibold\">\r\n                {users.find(u => u._id === selectedUser)?.username}\r\n              </h3>\r\n            </div>\r\n            <div className=\"flex-1 overflow-y-auto p-4\">\r\n              {messages.map((message) => (\r\n                <div\r\n                  key={message._id}\r\n                  className={`mb-4 ${\r\n                    message.sender === user?._id ? 'text-right' : 'text-left'\r\n                  }`}\r\n                >\r\n                  <div\r\n                    className={`inline-block p-3 rounded-lg ${\r\n                      message.sender === user?._id\r\n                        ? 'bg-blue-500 text-white'\r\n                        : 'bg-gray-200'\r\n                    }`}\r\n                  >\r\n                    {message.content}\r\n                  </div>\r\n                  <div className=\"text-xs text-gray-500 mt-1\">\r\n                    {new Date(message.createdAt).toLocaleTimeString()}\r\n                  </div>\r\n                </div>\r\n              ))}\r\n              <div ref={messagesEndRef} />\r\n            </div>\r\n            <form onSubmit={handleSendMessage} className=\"p-4 border-t\">\r\n              <div className=\"flex\">\r\n                <input\r\n                  type=\"text\"\r\n                  value={newMessage}\r\n                  onChange={(e) => setNewMessage(e.target.value)}\r\n                  placeholder=\"메시지를 입력하세요...\"\r\n                  className=\"flex-1 border rounded-l-lg p-2 focus:outline-none focus:ring-2 focus:ring-blue-500\"\r\n                />\r\n                <button\r\n                  type=\"submit\"\r\n                  className=\"bg-blue-500 text-white px-4 py-2 rounded-r-lg hover:bg-blue-600\"\r\n                >\r\n                  전송\r\n                </button>\r\n              </div>\r\n            </form>\r\n          </>\r\n        ) : (\r\n          <div className=\"flex items-center justify-center h-full text-gray-500\">\r\n            <div className=\"text-center\">\r\n              <ChatBubbleLeftIcon className=\"w-12 h-12 mx-auto mb-2\" />\r\n              <p>채팅을 선택해주세요</p>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chat; ","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\nimport ChatList from './ChatList';\r\nimport Chat from './Chat';\r\nimport axios from 'axios';\r\n\r\nconst ChatPage: React.FC = () => {\r\n  const { activeChat } = useSelector((state: RootState) => state.chat);\r\n  const [selectedUser, setSelectedUser] = useState<{\r\n    id: string;\r\n    username: string;\r\n    profileImage?: string;\r\n  } | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    console.log('채팅 페이지 컴포넌트 마운트');\r\n    return () => {\r\n      console.log('채팅 페이지 컴포넌트 언마운트');\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (activeChat) {\r\n      console.log('활성 채팅 변경:', activeChat);\r\n      const fetchUserInfo = async () => {\r\n        setLoading(true);\r\n        try {\r\n          console.log('사용자 정보 가져오기 시도:', activeChat);\r\n          const response = await axios.get(`/api/users/${activeChat}`);\r\n          console.log('사용자 정보 가져오기 성공:', response.data);\r\n          setSelectedUser(response.data);\r\n        } catch (error) {\r\n          console.error('사용자 정보를 불러오는데 실패했습니다:', error);\r\n        } finally {\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      fetchUserInfo();\r\n    } else {\r\n      console.log('활성 채팅 없음');\r\n      setSelectedUser(null);\r\n    }\r\n  }, [activeChat]);\r\n\r\n  console.log('채팅 페이지 렌더링:', { activeChat, selectedUser, loading });\r\n\r\n  return (\r\n    <div className=\"flex h-[calc(100vh-4rem)]\">\r\n      <ChatList />\r\n      <div className=\"flex-1 bg-gray-50\">\r\n        {loading ? (\r\n          <div className=\"flex items-center justify-center h-full\">\r\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500\"></div>\r\n          </div>\r\n        ) : selectedUser ? (\r\n          <Chat\r\n            userId={selectedUser.id}\r\n            username={selectedUser.username}\r\n            profileImage={selectedUser.profileImage}\r\n          />\r\n        ) : (\r\n          <div className=\"flex items-center justify-center h-full\">\r\n            <p className=\"text-gray-500\">채팅할 사용자를 선택해주세요.</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatPage; "],"names":["ChatBubbleLeftIcon","title","titleId","props","svgRef","React.createElement","ForwardRef","React.forwardRef","ChatList","dispatch","useDispatch","activeChat","onlineUsers","useSelector","state","users","setUsers","useState","loading","setLoading","useEffect","response","axios","error","handleUserClick","userId","setActiveChat","jsx","jsxs","user","Chat","messages","status","selectedUser","setSelectedUser","newMessage","setNewMessage","socket","setSocket","messagesEndRef","useRef","getChatUsers","newSocket","io","getChatMessages","message","_a","handleSendMessage","e","createMessage","chatUser","Fragment","u","_b","ChatPage"],"mappings":"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","x_google_ignoreList":[0]}